generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CourseSummary {
  id                 Int        @id @default(autoincrement())
  campusName         String     @map(name: "campus_name")
  academicFieldName  String     @map(name: "academic_field_name")
  season             String     @map(name: "season")
  subjectName        String     @map(name: "subject_name")
  dayOfWeekPeriod    String     @map(name: "day_of_week_period")
  locationName       String     @map(name: "location_name")
  lessonModeName     String     @map(name: "lesson_mode")
  timetableYear      String     @map(name: "timetable_year")
  faculties          String[]   @map(name: "faculty")
  entryNumber        String     @map(name: "entry_number") @unique
  syllabusDetailUrl  String     @map(name: "syllabus_detail_url")
  reviews            Review[]
}

model Review {
  id                Int           @id @default(autoincrement())
  course            CourseSummary @relation(fields: [courseId], references: [id])
  courseId          Int
  attendance        Boolean       @default(false)
  hasReport         Boolean       @default(false)
  reportLength      Int           @default(0)
  hasExam           Boolean       @default(false)
  allowedCheatsheet Boolean       @default(false)
  reputation        Int           @default(0)
  detail            String?
  createdAt         DateTime      @default(dbgenerated())
  updatedAt         DateTime      @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}