generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CourseSummary {
  id                Int      @id @default(autoincrement())
  campusName        String   @map(name: "campus_name")
  academicFieldName String   @map(name: "academic_field_name")
  season            String   @map(name: "season")
  subjectName       String   @map(name: "subject_name")
  dayOfWeekPeriod   String   @map(name: "day_of_week_period")
  locationName      String   @map(name: "location_name")
  lessonModeName    String   @map(name: "lesson_mode")
  timetableYear     String   @map(name: "timetable_year")
  faculties         String[] @map(name: "faculty")
  entryNumber       String   @unique @map(name: "entry_number")
  syllabusDetailUrl String   @map(name: "syllabus_detail_url")
  reviews           Review[]
}

model Review {
  id                Int           @id @default(autoincrement())
  course            CourseSummary @relation(fields: [courseId], references: [id])
  courseId          Int
  attendance        Boolean       @default(false)
  hasReport         Boolean       @default(false)
  reportLength      Int           @default(0)
  hasExam           Boolean       @default(false)
  allowedCheatsheet Boolean       @default(false)
  reputation        Int           @default(0)
  detail            String?
  createdAt         DateTime      @default(dbgenerated())
  updatedAt         DateTime      @updatedAt
  userId            String
  user              User          @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  nickname      String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  circleCreator CircleCreator[]
  faculty       Faculty?        @relation(fields: [facultyId], references: [id])
  facultyId     Int?
  major         Major?          @relation(fields: [majorId], references: [id])
  majorId       Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(dbgenerated())
}

model Circle {
  id                Int               @id @default(autoincrement())
  circleCreator     CircleCreator[]
  createdAt         DateTime          @default(dbgenerated())
  updatedAt         DateTime          @updatedAt
  circleName        String
  category          CircleCategory[]
  tags              Tag[]
  description       String
  location          String
  memberCount       Int
  contactInfo       String?
  recruitmentStatus Boolean           @default(false) @db.Boolean
  establishedAt     DateTime
  isAuthorized      Boolean           @default(false) @db.Boolean
  initialCost       Int
  membershipFee     Int
  schedule          String
  socialMediaLinks  SocialMediaLink[]
  websiteURL        String?
}

model CircleCategory {
  id       Int    @id @default(autoincrement())
  circle   Circle @relation(fields: [circleId], references: [id])
  circleId Int
  name     String

  @@index([circleId], name: "circle_category_circle_id_index")
}

model Tag {
  id        Int    @id @default(autoincrement())
  circle    Circle @relation(fields: [circleId], references: [id])
  circleId  Int
  name      String
  usedCount Int    @default(0)

  @@index([circleId], name: "tag_circle_id_index")
}

model CircleCreator {
  id       Int    @id @default(autoincrement())
  circle   Circle @relation(fields: [circleId], references: [id])
  circleId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@index([circleId], name: "circle_creator_circle_id_index")
}

model SocialMediaLink {
  id       Int    @id @default(autoincrement())
  circle   Circle @relation(fields: [circleId], references: [id])
  circleId Int
  name     String
  url      String

  @@index([circleId], name: "social_media_link_circle_id_index")
}

model Faculty {
  id    Int     @id @default(autoincrement())
  name  String
  major Major[]
  users User[]
}

model Major {
  id        Int     @id @default(autoincrement())
  faculty   Faculty @relation(fields: [facultyId], references: [id])
  facultyId Int
  name      String
  users     User[]
}
